#include "Snake.hpp"

struct {
    int x;
    int y;
} s[100];

class fruct // ????? ???????, ??? ?????, ??????? ????? ???? ???? ????
{
public:
    int x, y; //?????????? ???????, ??? ? ??? ????? ?????????

    void New() // ?????? ? ?????? ????????. ?? ????? ?????????? ? ?????? ???? ? ? ??? ??????, ????? ???? ????? ???? ?? ???????
    {
        x = rand() % N; // ?????????? X ?????????? ????? ??????
        y = rand() % M; // ?????????? Y ?????????? ????? ??????
    }

    void DrawFruct(sf::RenderWindow& win) // ??????, ?????????????? ??????
    {
        sf::RectangleShape line(sf::Vector2f(scale, scale));

        line.setPosition(x * scale, y * scale);

        line.setFillColor(sf::Color(139, 0, 0));
        win.draw(line);
    }
} m[5]; // ????? ? ????????, ????? ???????, ? ??? ???????? ???????????? 5 ??????? ? ?????? ??????, ? ?? ????, ??? ?? ????????

void Draw(sf::RenderWindow& win) // ???????, ??????? ???????????? ?????
{
    sf::VertexArray linew(sf::Lines, 80);
    sf::VertexArray lineh(sf::Lines, 80);
    Texture GamegroundTexture;
    GamegroundTexture.loadFromFile("image/Gamefon.jpg");
    Sprite Gameground(GamegroundTexture);
    Gameground.setPosition(0, 0);
    for (int i = 0, j = 0; i < 1000; i += scale, j += 2) {
        lineh[j].position = sf::Vector2f(i, 0);
        lineh[j + 1].position = sf::Vector2f(i, 1000);
        linew[j].position = sf::Vector2f(0, i);
        linew[j + 1].position = sf::Vector2f(1000, i);
    }
    win.draw(Gameground);
    win.draw(lineh);
    win.draw(linew);
}

void Snake(sf::RenderWindow& win) // ??????? ?????? ?? ?????
{
    for (int i = 0; i < num; i++) // ???? ?????????.
    {
        sf::RectangleShape line(sf::Vector2f(scale, scale));

        line.setPosition(s[i].x * scale, s[i].y * scale);

        line.setFillColor(sf::Color(69, 139, 116));
        //?????? ????????, ?? ????? "?????" ????
        win.draw(line);
    }
}

int tick()
{
    for (int i = 1; i < num; i++)
        if (s[0].x == s[i].x && s[0].y == s[i].y)
            return 0;
    if (s[0].x > 38)
        return 0;
    if (s[0].y > 38)
        return 0;
    if (s[0].x < 0)
        return 0;
    if (s[0].y < 0)
        return 0;

    for (int i = num; i > 0; --i) {
        s[i].x = s[i - 1].x;
        s[i].y = s[i - 1].y;
    }
    if (dir == 2)
        s[0].y += 1;
    if (dir == 3)
        s[0].x -= 1;
    if (dir == 1)
        s[0].x += 1;
    if (dir == 0)
        s[0].y -= 1;

    for (int i = 0; i < 10; i++) {
        if ((s[0].x == m[i].x) && (s[0].y == m[i].y)) {
            num++;
            m[i].New();
        }
    }
    return 1;
}

void Key(int& dir)
{
    if ((Keyboard::isKeyPressed(Keyboard::Up) || Keyboard::isKeyPressed(Keyboard::W)) && dir != 2)
        dir = 0;
    if ((Keyboard::isKeyPressed(Keyboard::Right) || Keyboard::isKeyPressed(Keyboard::D)) && dir != 3)
        dir = 1;
    if ((Keyboard::isKeyPressed(Keyboard::Down) || Keyboard::isKeyPressed(Keyboard::S)) && dir != 0)
        dir = 2;
    if ((Keyboard::isKeyPressed(Keyboard::Left) || Keyboard::isKeyPressed(Keyboard::A)) && dir != 1)
        dir = 3;
}

void Display(sf::RenderWindow& win) //??????? ????? ?????????
{
    Draw(win);  // ????? ??????? Draw, ?????????? ?? ????????? ???????
    Snake(win); // ????? ??????? Snake, ?????????? ?? ????????? ??????

    for (int i = 0; i < 5; i++) // ?????????? ????? ????????
        m[i].DrawFruct(win);
}

int game(RenderWindow& window) // ??????? ???????
{
    std::cout << " Loading...";
    srand(time(0));
    for (int i = 0; i < 10; i++) // ?????????, ????? ?????? ????????? ???????
        m[i].New();
    num = 4;
    s[0].x = 10;
    for (int i = 0; i < num; i++) {
        s[i].y = 10 * (i + 1); // ? Y ??????????
        tick();
    }
    int speed = 600;
    float timer = 0;
    Clock clock;
    while (window.isOpen()) {
        sf::Event event;
        float time = clock.getElapsedTime().asMicroseconds(); //???? ????????? ????? ? ?????????????
        clock.restart();                                      //????????????? ?????
        time = time / speed;
        std::cout << time << "\n";
        timer += time;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }
        if (Keyboard::isKeyPressed(Keyboard::Escape))
            menu(window);
        if (Keyboard::isKeyPressed(Keyboard::Space)) {
            speed = 30000;
            timer = 0;
        }
        if (Keyboard::isKeyPressed(Keyboard::Up) || Keyboard::isKeyPressed(Keyboard::Down) || Keyboard::isKeyPressed(Keyboard::Left) || Keyboard::isKeyPressed(Keyboard::Right) || Keyboard::isKeyPressed(Keyboard::W)
            || Keyboard::isKeyPressed(Keyboard::A) || Keyboard::isKeyPressed(Keyboard::S) || Keyboard::isKeyPressed(Keyboard::D))
            speed = 1000;
        Key(dir);
        window.clear();
        Display(window);
        window.display();
        if (timer > speed) {
            tick();
            timer = 0;
        }
    }

    return 0;
}

